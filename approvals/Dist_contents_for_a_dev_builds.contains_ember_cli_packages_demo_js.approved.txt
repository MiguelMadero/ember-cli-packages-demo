"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('ember-cli-packages-demo/app', ['exports', 'ember', 'ember-cli-packages-demo/resolver', 'ember-load-initializers', 'ember-cli-packages-demo/config/environment'], function (exports, _ember, _emberCliPackagesDemoResolver, _emberLoadInitializers, _emberCliPackagesDemoConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _emberCliPackagesDemoConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _emberCliPackagesDemoConfigEnvironment['default'].podModulePrefix,
    Resolver: _emberCliPackagesDemoResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _emberCliPackagesDemoConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('ember-cli-packages-demo/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('ember-cli-packages-demo/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('ember-cli-packages-demo/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('ember-cli-packages-demo/initializers/export-application-global', ['exports', 'ember', 'ember-cli-packages-demo/config/environment'], function (exports, _ember, _emberCliPackagesDemoConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_emberCliPackagesDemoConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _emberCliPackagesDemoConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_emberCliPackagesDemoConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('ember-cli-packages-demo/resolver', ['exports', 'ember', 'ember-resolver', 'ember-cli-packages-demo/config/environment'], function (exports, _ember, _emberResolver, _emberCliPackagesDemoConfigEnvironment) {

  var lookupFunctions = [],
      genericModuleNameLookupPatterns = [
  // NOTE: the order is important, since they're evaluted as we add them to the array
  // So we need the podBasedModuleName first and defaultModuleName last, just like the ember-resolver does

  // NOTE: temporarily removes podBasedModuleName lookups to reduce noise when using LOG_REOSLVER
  // function podBasedModuleName(packageName, parsedName) {
  //     // var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
  //     var podPrefix = packageName;

  //     return this.podBasedLookupWithPrefix(podPrefix, parsedName);
  // },

  // NOTE: temporarily removes podBasedModuleName lookups to reduce noise when using LOG_REOSLVER
  // function podBasedComponentsInSubdir(packageName, parsedName) {
  //     // var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
  //     var podPrefix = packageName;
  //     podPrefix = podPrefix + '/components';

  //     if (parsedName.type === 'component' || parsedName.fullNameWithoutType.match(/^components/)) {
  //         return this.podBasedLookupWithPrefix(podPrefix, parsedName);
  //     }
  // },

  function mainModuleName(packageName, parsedName) {
    // if router:main or adapter:main look for a module with just the type first
    var tmpModuleName = /*parsedName.prefix + '/' +*/packageName + '/' + parsedName.type;

    if (parsedName.fullNameWithoutType === 'main') {
      return tmpModuleName;
    }
  },
  // Extensions the ember-resolver lookuppatterns that take a 'packageName'
  function defaultModuleName(packageName, parsedName) {
    return packageName + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
  }];

  // The order is again important
  genericModuleNameLookupPatterns.forEach(function (genericLookupPattern) {
    _emberCliPackagesDemoConfigEnvironment['default'].packageNames.concat(_emberCliPackagesDemoConfigEnvironment['default'].modulePrefix).forEach(function (packageName) {
      lookupFunctions.push(function (parsedName) {
        return genericLookupPattern.call(this, packageName, parsedName);
      });
    });
  });

  exports['default'] = _emberResolver['default'].extend({
    moduleNameLookupPatterns: _ember['default'].computed(function () {
      // Not sure if we need to delegate, this might be enough.
      // return lookupFunctions.concat(this._super());
      return lookupFunctions;
    })
  });
});
define('ember-cli-packages-demo/router', ['exports', 'ember', 'ember-cli-packages-demo/config/environment'], function (exports, _ember, _emberCliPackagesDemoConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _emberCliPackagesDemoConfigEnvironment['default'].locationType
  });

  Router.map(function () {
    //This will catch all the invalid routes.
    this.resource('catchAll', { path: '*:' });
  });

  exports['default'] = Router;
});
define('ember-cli-packages-demo/routes/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('ember-cli-packages-demo/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define("ember-cli-packages-demo/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Welcome to Ember - with packaging and lazy loading");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 2, 2, contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  })());
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('ember-cli-packages-demo/config/environment', ['ember'], function(Ember) {
  var prefix = 'ember-cli-packages-demo';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("ember-cli-packages-demo/app")["default"].create({});
}

/* jshint ignore:end */
//# sourceMappingURL=ember-cli-packages-demo.map
