"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('ember-cli-packages-demo/app', ['exports', 'ember', 'ember-cli-packages-demo/resolver', 'ember-load-initializers', 'ember-cli-packages-demo/config/environment'], function (exports, _ember, _emberCliPackagesDemoResolver, _emberLoadInitializers, _emberCliPackagesDemoConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _emberCliPackagesDemoConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _emberCliPackagesDemoConfigEnvironment['default'].podModulePrefix,
    Resolver: _emberCliPackagesDemoResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _emberCliPackagesDemoConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('ember-cli-packages-demo/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('ember-cli-packages-demo/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('ember-cli-packages-demo/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('ember-cli-packages-demo/initializers/export-application-global', ['exports', 'ember', 'ember-cli-packages-demo/config/environment'], function (exports, _ember, _emberCliPackagesDemoConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_emberCliPackagesDemoConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _emberCliPackagesDemoConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_emberCliPackagesDemoConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('ember-cli-packages-demo/resolver', ['exports', 'ember', 'ember-resolver', 'ember-cli-packages-demo/config/environment'], function (exports, _ember, _emberResolver, _emberCliPackagesDemoConfigEnvironment) {

  var lookupFunctions = [],
      genericModuleNameLookupPatterns = [
  // NOTE: the order is important, since they're evaluted as we add them to the array
  // So we need the podBasedModuleName first and defaultModuleName last, just like the ember-resolver does

  // NOTE: temporarily removes podBasedModuleName lookups to reduce noise when using LOG_REOSLVER
  // function podBasedModuleName(packageName, parsedName) {
  //     // var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
  //     var podPrefix = packageName;

  //     return this.podBasedLookupWithPrefix(podPrefix, parsedName);
  // },

  // NOTE: temporarily removes podBasedModuleName lookups to reduce noise when using LOG_REOSLVER
  // function podBasedComponentsInSubdir(packageName, parsedName) {
  //     // var podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
  //     var podPrefix = packageName;
  //     podPrefix = podPrefix + '/components';

  //     if (parsedName.type === 'component' || parsedName.fullNameWithoutType.match(/^components/)) {
  //         return this.podBasedLookupWithPrefix(podPrefix, parsedName);
  //     }
  // },

  function mainModuleName(packageName, parsedName) {
    // if router:main or adapter:main look for a module with just the type first
    var tmpModuleName = /*parsedName.prefix + '/' +*/packageName + '/' + parsedName.type;

    if (parsedName.fullNameWithoutType === 'main') {
      return tmpModuleName;
    }
  },
  // Extensions the ember-resolver lookuppatterns that take a 'packageName'
  function defaultModuleName(packageName, parsedName) {
    return packageName + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
  }];

  // The order is again important
  genericModuleNameLookupPatterns.forEach(function (genericLookupPattern) {
    _emberCliPackagesDemoConfigEnvironment['default'].packageNames.concat(_emberCliPackagesDemoConfigEnvironment['default'].modulePrefix).forEach(function (packageName) {
      lookupFunctions.push(function (parsedName) {
        return genericLookupPattern.call(this, packageName, parsedName);
      });
    });
  });

  exports['default'] = _emberResolver['default'].extend({
    moduleNameLookupPatterns: _ember['default'].computed(function () {
      // Not sure if we need to delegate, this might be enough.
      // return lookupFunctions.concat(this._super());
      return lookupFunctions;
    })
  });
});
define('ember-cli-packages-demo/router', ['exports', 'ember'], function (exports, _ember) {

  var Router = _ember['default'].Router.extend();

  Router.map(function () {
    //This will catch all the invalid routes, try to load its package (or bundle) and then loads its route
    this.route('catchAll', { path: '*:' });
    this.route('boot');
  });

  exports['default'] = Router;
});
define('ember-cli-packages-demo/routes/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('ember-cli-packages-demo/routes/catch-all', ['exports', 'ember'], function (exports, _ember) {

  var retried = false;
  exports['default'] = _ember['default'].Route.extend({
    lazyLoader: _ember['default'].inject.service(),
    redirect: function redirect(model, transition) {
      if (retried) {
        // Shortcircuit this in case the download fails.
        retried = !retried;
        return;
      }
      retried = !retried;
      transition.abort();
      this.get('lazyLoader').loadBundleForUrl(transition.intent.url).then(function () {
        transition.retry();
        retried = false; // reset this so we can transition to another lazy loaded section
      });
    }
  });
});
define('ember-cli-packages-demo/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('ember-cli-packages-demo/services/lazy-loader', ['exports', 'ember', 'ember-cli-packages-demo/config/environment', 'ember-cli-packages-demo/utils/lazy-routing-configuration'], function (exports, _ember, _emberCliPackagesDemoConfigEnvironment, _emberCliPackagesDemoUtilsLazyRoutingConfiguration) {

  var loadedBundles = {};
  _emberCliPackagesDemoConfigEnvironment['default'].bundles.forEach(function (bundle) {
    return loadedBundles[bundle.name] = false;
  });

  exports['default'] = _ember['default'].Service.extend({
    // TODO: consider moving to  really need to inject this or if it's better to get as an import as @nathanhammond suggested
    // TODO: consider removing the $ dependency
    // ajax: Ember.inject.service(),
    isBundleLoaded: function isBundleLoaded(bundleName) {
      return loadedBundles[bundleName];
    },
    getBundleForUrl: function getBundleForUrl(url) {
      return _emberCliPackagesDemoConfigEnvironment['default'].bundles.find(function (bundle) {
        return bundle.handledRoutesPatterns.any(function (pattern) {
          return url.match(pattern);
        });
      });
    },
    loadBundleForUrl: function loadBundleForUrl(url) {
      return this.loadBundle(this.getBundleForUrl(url));
    },
    loadBundle: function loadBundle(bundle) {
      var _this = this;

      if (this.isBundleLoaded(bundle.name)) {
        return _ember['default'].RSVP.resolve();
      }
      // TODO: figure out how to thumbprint this
      // TODO: change to use ember-ajax instead of $.getScript
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var get = _ember['default'].$.ajax({
          dataType: "script",
          cache: true,
          url: '/assets/' + bundle.name + '.js'
        });
        get.done(function () {
          loadedBundles[bundle.name] = true;
          bundle.packages.forEach(function (packageName) {
            _this._addRoutesForPackage(packageName);
          });
          _ember['default'].run(null, resolve);
        });
        get.fail(function (jqXHR) {
          return _ember['default'].run(null, reject, jqXHR);
        });
      });
    },
    _addRoutesForPackage: function _addRoutesForPackage(packageName) {
      var MainRouter = this.get('container').lookup('router:main');
      var PackageRouter = require(packageName + '/router');
      if (PackageRouter && PackageRouter['default']) {
        _emberCliPackagesDemoUtilsLazyRoutingConfiguration['default'].mergeRouters(MainRouter, PackageRouter['default']);
      }
    }
  });
});
/* globals require*/
define("ember-cli-packages-demo/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Welcome to Ember - with packaging and lazy loading");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment(" TODO: change it to test link-to ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "href", "#/boot");
        var el4 = dom.createTextNode("Boot");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "href", "#/package1");
        var el4 = dom.createTextNode("Package 1");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "href", "#/package2");
        var el4 = dom.createTextNode("Package 2");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks,
            content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  })());
});
define("ember-cli-packages-demo/templates/boot", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "boot");
        var el2 = dom.createTextNode("\n  Boot\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  })());
});
define("ember-cli-packages-demo/templates/catch-all", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading...");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        return fragment;
      }
    };
  })());
});
define('ember-cli-packages-demo/utils/lazy-routing-configuration', ['exports', 'ember'], function (exports, _ember) {
  exports.mergeRouters = mergeRouters;

  function getDSL(PackageRouter) {
    // Extracted from Ember, might not work in >1.11
    var dslCallbacks = PackageRouter.dslCallbacks;
    var dsl = new _ember['default'].RouterDSL(null, {
      // enableLoadingSubstates: !!moduleBasedResolver
      enableLoadingSubstates: false
    });

    function generateDSL() {
      this.resource('application', { path: "/", overrideNameAssertion: true }, function () {
        for (var i = 0; i < dslCallbacks.length; i++) {
          dslCallbacks[i].call(this);
        }
      });
    }

    generateDSL.call(dsl);

    // TODO: not sure how this works and if it is needed
    // if (Ember.get(this, 'namespace.LOG_TRANSITIONS_INTERNAL')) {
    //   router.log = Ember['default'].Logger.debug;
    // }

    // router.map(dsl.generate());
    return dsl.generate();
  }

  function mergeRouters(targetRouterInstance, PackageRouter) {
    targetRouterInstance.router.recognizer.map(getDSL(PackageRouter), function (recognizer, routes) {
      for (var i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {
        var route = routes[i];
        recognizer.add(routes, { as: route.handler });
        proceed = route.path === '/' || route.path === '' || route.handler.slice(-6) === '.index';
      }
    });
  }
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('ember-cli-packages-demo/config/environment', ['ember'], function(Ember) {
  var prefix = 'ember-cli-packages-demo';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("ember-cli-packages-demo/app")["default"].create({});
}

/* jshint ignore:end */
//# sourceMappingURL=ember-cli-packages-demo.map
